{"version":3,"file":"ngx-loading-bar-http-client.js","sources":["@ngx-loading-bar/http-client/loading-bar.interceptor.ts","@ngx-loading-bar/http-client/http.module.ts","@ngx-loading-bar/http-client/ngx-loading-bar-http-client.ts"],"names":[],"mappings":";;;;;;;;IAOa,qBAAqB,GAAlC,MAAa,qBAAqB;AAAG,IACnC,YAAoB,MAAyB;AAAI,QAA7B,WAAM,GAAN,MAAM,CAAmB;AAAC,KAAG;AACnD,IACE,SAAS,CAAC,GAAqB,EAAE,IAAiB;AAAI;AACzB,QAC3B,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;AAC7C,YAAM,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,EAAE,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;AACzF,SAAK;AACL,QACI,IAAI,OAAO,GAAG,KAAK,CAAC;AACxB,QAAI,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;AAC3C,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAC1B,GAAG,CAAC;AACV,YAAQ,IAAI,CAAC,OAAO,EAAE;AACtB,gBAAU,GAAG,CAAC,KAAK,EAAE,CAAC;AACtB,gBAAU,OAAO,GAAG,IAAI,CAAC;AACzB,aAAS;AACT,SAAO,CAAC,EACF,QAAQ,CAAC,MAAM,OAAO,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC,CAC1C,CAAC;AACN,KAAG;AACH;;yKAAC;AACD;AAA+C,YArBjB,iBAAiB;AAAG;AADrC,qBAAqB,oBADjC,UAAU,EAAE,jBACT,kCAC0B,iBAAiB;AAAG,GADrC,qBAAqB,CAqBjC;AACA;AAAC,ICbW,0BAA0B,GAAvC,MAAa,0BAA0B;AAAG,EAAA;AAA7B,0BAA0B,oBAXtC,QAAQ,CAAC,UACR,OAAO,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,UAC7C,OAAO,EAAE,CAAC;YAAgB,EAAE,gBAAgB,CAAC,UAC7C,SAAS,EAAE,cACT,kBACE,OAAO,EAAE,iBAAiB;iBAC1B,QAAQ,EAAE,qBAAqB,kBAC/B,KAAK,EAAE,IAAI;KACZ;MACF,OACF,CAAC,IACW;IAA0B,CAAG;;;;;;;;;;;;;;;;;;;;;gRAC1C;AAAC;ACjBD;AACA;AACA;AACA;AACA;AAEqC","sourcesContent":["import { LoadingBarService } from '@ngx-loading-bar/core';\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { finalize, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class LoadingBarInterceptor implements HttpInterceptor {\n  constructor(private loader: LoadingBarService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // https://github.com/angular/angular/issues/18155\n    if (req.headers.has('ignoreLoadingBar')) {\n      return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));\n    }\n\n    let started = false;\n    const ref = this.loader.useRef('http');\n    return next.handle(req).pipe(\n      tap(() => {\n        if (!started) {\n          ref.start();\n          started = true;\n        }\n      }),\n      finalize(() => started && ref.complete()),\n    );\n  }\n}\n","import { LoadingBarModule } from '@ngx-loading-bar/core';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { LoadingBarInterceptor } from './loading-bar.interceptor';\n\n@NgModule({\n  imports: [HttpClientModule, LoadingBarModule],\n  exports: [HttpClientModule, LoadingBarModule],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: LoadingBarInterceptor,\n      multi: true,\n    },\n  ],\n})\nexport class LoadingBarHttpClientModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {LoadingBarInterceptor as Éµa} from './loading-bar.interceptor';"]}