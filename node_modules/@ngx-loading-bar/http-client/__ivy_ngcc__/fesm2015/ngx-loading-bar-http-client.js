import { __decorate, __metadata } from 'tslib';
import { LoadingBarService, LoadingBarModule } from '@ngx-loading-bar/core';
import { Injectable, NgModule } from '@angular/core';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { tap, finalize } from 'rxjs/operators';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@ngx-loading-bar/core';
let LoadingBarInterceptor = class LoadingBarInterceptor {
    constructor(loader) {
        this.loader = loader;
    }
    intercept(req, next) {
        // https://github.com/angular/angular/issues/18155
        if (req.headers.has('ignoreLoadingBar')) {
            return next.handle(req.clone({ headers: req.headers.delete('ignoreLoadingBar') }));
        }
        let started = false;
        const ref = this.loader.useRef('http');
        return next.handle(req).pipe(tap(() => {
            if (!started) {
                ref.start();
                started = true;
            }
        }), finalize(() => started && ref.complete()));
    }
};
LoadingBarInterceptor.ɵfac = function LoadingBarInterceptor_Factory(t) { return new (t || LoadingBarInterceptor)(ɵngcc0.ɵɵinject(ɵngcc1.LoadingBarService)); };
LoadingBarInterceptor.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: LoadingBarInterceptor, factory: function (t) { return LoadingBarInterceptor.ɵfac(t); } });
LoadingBarInterceptor.ctorParameters = () => [
    { type: LoadingBarService }
];
LoadingBarInterceptor = __decorate([ __metadata("design:paramtypes", [LoadingBarService])
], LoadingBarInterceptor);

let LoadingBarHttpClientModule = class LoadingBarHttpClientModule {
};
LoadingBarHttpClientModule.ɵfac = function LoadingBarHttpClientModule_Factory(t) { return new (t || LoadingBarHttpClientModule)(); };
LoadingBarHttpClientModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: LoadingBarHttpClientModule });
LoadingBarHttpClientModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [
        {
            provide: HTTP_INTERCEPTORS,
            useClass: LoadingBarInterceptor,
            multi: true
        },
    ], imports: [HttpClientModule, LoadingBarModule, HttpClientModule, LoadingBarModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingBarInterceptor, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LoadingBarService }]; }, null); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LoadingBarHttpClientModule, [{
        type: NgModule,
        args: [{
                imports: [HttpClientModule, LoadingBarModule],
                exports: [HttpClientModule, LoadingBarModule],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: LoadingBarInterceptor,
                        multi: true
                    },
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(LoadingBarHttpClientModule, { imports: function () { return [HttpClientModule, LoadingBarModule]; }, exports: function () { return [HttpClientModule, LoadingBarModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingBarHttpClientModule, LoadingBarInterceptor as ɵa };

//# sourceMappingURL=ngx-loading-bar-http-client.js.map