{"version":3,"file":"virtual-scroller.d.ts","sources":["virtual-scroller.d.ts"],"names":[],"mappingssourcesContent":["/// <reference types=\"tween.js\" />\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport * as tween from '@tweenjs/tween.js';\r\nexport interface VirtualScrollerDefaultOptions {\r\n    checkResizeInterval: number;\r\n    modifyOverflowStyleOfParentScroll: boolean;\r\n    resizeBypassRefreshThreshold: number;\r\n    scrollAnimationTime: number;\r\n    scrollDebounceTime: number;\r\n    scrollThrottlingTime: number;\r\n    scrollbarHeight?: number;\r\n    scrollbarWidth?: number;\r\n    stripedTable: boolean;\r\n}\r\nexport declare function VIRTUAL_SCROLLER_DEFAULT_OPTIONS_FACTORY(): VirtualScrollerDefaultOptions;\r\nexport interface WrapGroupDimensions {\r\n    maxChildSizePerWrapGroup: WrapGroupDimension[];\r\n    numberOfKnownWrapGroupChildSizes: number;\r\n    sumOfKnownWrapGroupChildHeights: number;\r\n    sumOfKnownWrapGroupChildWidths: number;\r\n}\r\nexport interface WrapGroupDimension {\r\n    childHeight: number;\r\n    childWidth: number;\r\n    items: any[];\r\n}\r\nexport interface IDimensions {\r\n    childHeight: number;\r\n    childWidth: number;\r\n    itemCount: number;\r\n    itemsPerPage: number;\r\n    itemsPerWrapGroup: number;\r\n    maxScrollPosition: number;\r\n    pageCount_fractional: number;\r\n    scrollLength: number;\r\n    viewportLength: number;\r\n    wrapGroupsPerPage: number;\r\n}\r\nexport interface IPageInfo {\r\n    endIndex: number;\r\n    endIndexWithBuffer: number;\r\n    maxScrollPosition: number;\r\n    scrollEndPosition: number;\r\n    scrollStartPosition: number;\r\n    startIndex: number;\r\n    startIndexWithBuffer: number;\r\n}\r\nexport interface IViewport extends IPageInfo {\r\n    padding: number;\r\n    scrollLength: number;\r\n}\r\nexport declare class VirtualScrollerComponent implements OnInit, OnChanges, OnDestroy {\r\n    protected readonly element: ElementRef;\r\n    protected readonly renderer: Renderer2;\r\n    protected readonly zone: NgZone;\r\n    protected changeDetectorRef: ChangeDetectorRef;\r\n    viewPortItems: any[];\r\n    window: Window & typeof globalThis;\r\n    get viewPortInfo(): IPageInfo;\r\n    executeRefreshOutsideAngularZone: boolean;\r\n    protected _enableUnequalChildrenSizes: boolean;\r\n    get enableUnequalChildrenSizes(): boolean;\r\n    set enableUnequalChildrenSizes(value: boolean);\r\n    RTL: boolean;\r\n    useMarginInsteadOfTranslate: boolean;\r\n    modifyOverflowStyleOfParentScroll: boolean;\r\n    stripedTable: boolean;\r\n    scrollbarWidth: number;\r\n    scrollbarHeight: number;\r\n    childWidth: number;\r\n    childHeight: number;\r\n    ssrChildWidth: number;\r\n    ssrChildHeight: number;\r\n    ssrViewportWidth: number;\r\n    ssrViewportHeight: number;\r\n    protected _bufferAmount: number;\r\n    get bufferAmount(): number;\r\n    set bufferAmount(value: number);\r\n    scrollAnimationTime: number;\r\n    resizeBypassRefreshThreshold: number;\r\n    protected _scrollThrottlingTime: number;\r\n    get scrollThrottlingTime(): number;\r\n    set scrollThrottlingTime(value: number);\r\n    protected _scrollDebounceTime: number;\r\n    get scrollDebounceTime(): number;\r\n    set scrollDebounceTime(value: number);\r\n    protected onScroll: () => void;\r\n    protected updateOnScrollFunction(): void;\r\n    protected checkScrollElementResizedTimer: number;\r\n    protected _checkResizeInterval: number;\r\n    get checkResizeInterval(): number;\r\n    set checkResizeInterval(value: number);\r\n    protected _items: any[];\r\n    get items(): any[];\r\n    set items(value: any[]);\r\n    compareItems: (item1: any, item2: any) => boolean;\r\n    protected _horizontal: boolean;\r\n    get horizontal(): boolean;\r\n    set horizontal(value: boolean);\r\n    protected revertParentOverscroll(): void;\r\n    protected oldParentScrollOverflow: {\r\n        x: string;\r\n        y: string;\r\n    };\r\n    protected _parentScroll: Element | Window;\r\n    get parentScroll(): Element | Window;\r\n    set parentScroll(value: Element | Window);\r\n    vsUpdate: EventEmitter<any[]>;\r\n    vsChange: EventEmitter<IPageInfo>;\r\n    vsStart: EventEmitter<IPageInfo>;\r\n    vsEnd: EventEmitter<IPageInfo>;\r\n    protected contentElementRef: ElementRef;\r\n    protected invisiblePaddingElementRef: ElementRef;\r\n    protected headerElementRef: ElementRef;\r\n    protected containerElementRef: ElementRef;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: any): void;\r\n    ngDoCheck(): void;\r\n    refresh(): void;\r\n    invalidateAllCachedMeasurements(): void;\r\n    invalidateCachedMeasurementForItem(item: any): void;\r\n    invalidateCachedMeasurementAtIndex(index: number): void;\r\n    scrollInto(item: any, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\r\n    scrollToIndex(index: number, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\r\n    protected scrollToIndex_internal(index: number, alignToBeginning?: boolean, additionalOffset?: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\r\n    scrollToPosition(scrollPosition: number, animationMilliseconds?: number, animationCompletedCallback?: () => void): void;\r\n    protected isAngularUniversalSSR: boolean;\r\n    constructor(element: ElementRef, renderer: Renderer2, zone: NgZone, changeDetectorRef: ChangeDetectorRef, platformId: Object, options: VirtualScrollerDefaultOptions);\r\n    protected getElementSize(element: HTMLElement): ClientRect;\r\n    protected previousScrollBoundingRect: ClientRect;\r\n    protected checkScrollElementResized(): void;\r\n    protected _invisiblePaddingProperty: any;\r\n    protected _offsetType: any;\r\n    protected _scrollType: any;\r\n    protected _pageOffsetType: any;\r\n    protected _childScrollDim: any;\r\n    protected _translateDir: any;\r\n    protected _marginDir: any;\r\n    protected updateDirection(): void;\r\n    protected debounce(func: Function, wait: number): Function;\r\n    protected throttleTrailing(func: Function, wait: number): Function;\r\n    protected calculatedScrollbarWidth: number;\r\n    protected calculatedScrollbarHeight: number;\r\n    protected padding: number;\r\n    protected previousViewPort: IViewport;\r\n    protected currentTween: tween.Tween;\r\n    protected cachedItemsLength: number;\r\n    protected disposeScrollHandler: () => void | undefined;\r\n    protected disposeResizeHandler: () => void | undefined;\r\n    protected refresh_internal(itemsArrayModified: boolean, refreshCompletedCallback?: () => void, maxRunTimes?: number): void;\r\n    protected getScrollElement(): HTMLElement;\r\n    protected addScrollEventHandlers(): void;\r\n    protected removeScrollEventHandlers(): void;\r\n    protected getElementsOffset(): number;\r\n    protected countItemsPerWrapGroup(): number;\r\n    protected getScrollStartPosition(): number;\r\n    protected minMeasuredChildWidth: number;\r\n    protected minMeasuredChildHeight: number;\r\n    protected wrapGroupDimensions: WrapGroupDimensions;\r\n    protected resetWrapGroupDimensions(): void;\r\n    protected calculateDimensions(): IDimensions;\r\n    protected cachedPageSize: number;\r\n    protected previousScrollNumberElements: number;\r\n    protected calculatePadding(arrayStartIndexWithBuffer: number, dimensions: IDimensions): number;\r\n    protected calculatePageInfo(scrollPosition: number, dimensions: IDimensions): IPageInfo;\r\n    protected calculateViewport(): IViewport;\r\n}\r\nexport declare class VirtualScrollerModule {\r\n}\r\n"]}