{"version":3,"file":"daterangepicker.component.d.ts","sources":["daterangepicker.component.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport * as dayjs from 'dayjs';\nimport { LocaleConfig } from './daterangepicker.config';\nimport { LocaleService } from './locale.service';\nexport declare enum SideEnum {\n    left = \"left\",\n    right = \"right\"\n}\nexport declare class DaterangepickerComponent implements OnInit, OnChanges {\n    private el;\n    private _ref;\n    private _localeService;\n    private _old;\n    chosenLabel: string;\n    calendarVariables: {\n        left: any;\n        right: any;\n    };\n    tooltiptext: any[];\n    timepickerVariables: {\n        left: any;\n        right: any;\n    };\n    daterangepicker: {\n        start: FormControl;\n        end: FormControl;\n    };\n    applyBtn: {\n        disabled: boolean;\n    };\n    startDate: dayjs.Dayjs;\n    endDate: dayjs.Dayjs;\n    dateLimit: number;\n    sideEnum: typeof SideEnum;\n    autoApply: Boolean;\n    singleDatePicker: Boolean;\n    showDropdowns: Boolean;\n    showWeekNumbers: Boolean;\n    showISOWeekNumbers: Boolean;\n    linkedCalendars: Boolean;\n    autoUpdateInput: Boolean;\n    alwaysShowCalendars: Boolean;\n    maxSpan: Boolean;\n    lockStartDate: Boolean;\n    timePicker: Boolean;\n    timePicker24Hour: Boolean;\n    timePickerIncrement: number;\n    timePickerSeconds: Boolean;\n    showClearButton: Boolean;\n    firstMonthDayClass: string;\n    lastMonthDayClass: string;\n    emptyWeekRowClass: string;\n    emptyWeekColumnClass: string;\n    firstDayOfNextMonthClass: string;\n    lastDayOfPreviousMonthClass: string;\n    showCustomRangeLabel: boolean;\n    showCancel: boolean;\n    keepCalendarOpeningWithRange: boolean;\n    showRangeLabelOnInput: boolean;\n    customRangeDirection: boolean;\n    chosenRange: string;\n    rangesArray: Array<any>;\n    isShown: Boolean;\n    inline: boolean;\n    leftCalendar: any;\n    rightCalendar: any;\n    showCalInRanges: Boolean;\n    nowHoveredDate: any;\n    pickingDate: Boolean;\n    options: any;\n    drops: string;\n    opens: string;\n    closeOnAutoApply: boolean;\n    choosedDate: EventEmitter<Object>;\n    rangeClicked: EventEmitter<Object>;\n    datesUpdated: EventEmitter<Object>;\n    startDateChanged: EventEmitter<Object>;\n    endDateChanged: EventEmitter<Object>;\n    cancelClicked: EventEmitter<Object>;\n    clearClicked: EventEmitter<void>;\n    pickerContainer: ElementRef;\n    _minDate: dayjs.Dayjs;\n    _maxDate: dayjs.Dayjs;\n    _locale: LocaleConfig;\n    _ranges: any;\n    set minDate(value: dayjs.Dayjs | string);\n    getMinDate(): dayjs.Dayjs | null;\n    set maxDate(value: dayjs.Dayjs | string);\n    getMaxDate(): dayjs.Dayjs | null;\n    set locale(value: any);\n    get locale(): any;\n    set ranges(value: any);\n    get ranges(): any;\n    constructor(el: ElementRef, _ref: ChangeDetectorRef, _localeService: LocaleService);\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnInit(): void;\n    renderRanges(): void;\n    renderTimePicker(side: SideEnum): void;\n    renderCalendar(side: SideEnum): void;\n    setStartDate(startDate: any): void;\n    setEndDate(endDate: any): void;\n    isInvalidDate(date: any): boolean;\n    isCustomDate(date: any): boolean;\n    isTooltipDate(date: any): string;\n    updateView(): void;\n    updateMonthsInView(): void;\n    /**\n     *  This is responsible for updating the calendars\n     */\n    updateCalendars(): void;\n    updateElement(): void;\n    remove(): void;\n    /**\n     * this should calculate the label\n     */\n    calculateChosenLabel(): void;\n    clickApply(e?: any): void;\n    clickCancel(e: any): void;\n    /**\n     * called when month is changed\n     * @param monthEvent get value in event.target.value\n     * @param side left or right\n     */\n    monthChanged(monthEvent: any, side: SideEnum): void;\n    /**\n     * called when year is changed\n     * @param yearEvent get value in event.target.value\n     * @param side left or right\n     */\n    yearChanged(yearEvent: any, side: SideEnum): void;\n    /**\n     * called when time is changed\n     * @param timeEvent  an event\n     * @param side left or right\n     */\n    timeChanged(timeEvent: any, side: SideEnum): void;\n    /**\n     *  call when month or year changed\n     * @param month month number 0 -11\n     * @param year year eg: 1995\n     * @param side left or right\n     */\n    monthOrYearChanged(month: number, year: number, side: SideEnum): void;\n    /**\n     * Click on previous month\n     * @param side left or right calendar\n     */\n    clickPrev(side: SideEnum): void;\n    /**\n     * Click on next month\n     * @param side left or right calendar\n     */\n    clickNext(side: SideEnum): void;\n    /**\n     * When hovering a date\n     * @param e event: get value by e.target.value\n     * @param side left or right\n     * @param row row position of the current date clicked\n     * @param col col position of the current date clicked\n     */\n    hoverDate(e: any, side: SideEnum, row: number, col: number): void;\n    /**\n     * When selecting a date\n     * @param e event: get value by e.target.value\n     * @param side left or right\n     * @param row row position of the current date clicked\n     * @param col col position of the current date clicked\n     */\n    clickDate(e: any, side: SideEnum, row: number, col: number): void;\n    /**\n     *  Click on the custom range\n     * @param e: Event\n     * @param label\n     */\n    clickRange(e: any, label: any): void;\n    show(e?: any): void;\n    hide(e?: any): void;\n    /**\n     * handle click on all element in the component, useful for outside of click\n     * @param e event\n     */\n    handleInternalClick(e: any): void;\n    /**\n     * update the locale options\n     * @param locale\n     */\n    updateLocale(locale: any): void;\n    /**\n     *  clear the daterange picker\n     */\n    clear(): void;\n    /**\n     * Find out if the selected range should be disabled if it doesn't\n     * fit into minDate and maxDate limitations.\n     */\n    disableRange(range: any): any;\n    /**\n     *\n     * @param date the date to add time\n     * @param side left or right\n     */\n    private _getDateWithTime;\n    /**\n     *  build the locale config\n     */\n    private _buildLocale;\n    private _buildCells;\n}\n"]}